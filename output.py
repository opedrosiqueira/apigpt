from dataclasses import make_dataclass
Stock = make_dataclass("Stock", ("symbol", "current", "high", "low"))

ChatCompletionMessage=make_dataclass("ChatCompletionMessage", ("content","role","function_call","tool_calls","refusal"))
Choice=make_dataclass("Choice",("finish_reason", "index", "logprobs", "message"))

result = Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='<h1>Guia Rápido: Equivalência dos Principais Comandos do SQLite no DrizzleORM</h1>\n\n<p>Este guia apresenta um comparativo entre os comandos fundamentais do SQLite e suas correspondências no DrizzleORM. Aqui, você encontrará exemplos práticos sobre como criar tabelas, manipular dados, entre outras operações essenciais em SQL, de forma eficiente utilizando o Drizzle. Vamos explorar as estruturas de definição, manipulação e consulta de dados com as duas soluções.</p>\n<hr>\n<h2 id="linguagem-de-defini-o-de-dados-ddl-">Linguagem de Definição de Dados (DDL)</h2>\n<h3 id="criar-tabela">CREATE TABLE</h3>\n<p>Crie uma nova tabela especificando colunas e tipos de dados. Ao utilizar o DrizzleORM, a criação e modificação de tabelas ocorre no arquivo <code>schema.js</code>, seguido pela execução de migrações.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE uma_tabela (\n    um_numero INTEGER,\n    um_decimal REAL,\n    um_texto TEXT,\n    um_arquivo BLOB\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const uma_tabela = sqliteTable(\'uma_tabela\', {\n  um_numero: integer(),\n  um_decimal: real(),\n  um_texto: text(),\n  um_arquivo: blob(),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>No DrizzleORM, uma tabela é criada através da função <code>sqliteTable</code>, onde o primeiro argumento é o nome da tabela e o segundo, um objeto contendo as colunas da tabela.</p>\n<h3 id="alterar-tabela">ALTER TABLE</h3>\n<p>Adicione uma coluna a uma tabela existente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>ALTER TABLE uma_tabela ADD COLUMN id INTEGER;</code></pre>\n      </td>\n      <td>\n        <pre><code>// Com Drizzle, alterações na estrutura da tabela são realizadas via migrações</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Adicione uma chave estrangeira a uma tabela já existente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>ALTER TABLE uma_tabela ADD COLUMN uma_tabela_id INTEGER REFERENCES uma_tabela(id);</code></pre>\n      </td>\n      <td>\n        <pre><code>// Com Drizzle, alterações na estrutura da tabela são realizadas via migrações</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="excluir-tabela">DROP TABLE</h3>\n<p>Exclua uma tabela do banco de dados.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>DROP TABLE uma_tabela;</code></pre>\n      </td>\n      <td>\n        <pre><code>// Com Drizzle, alterações na estrutura da tabela são implementadas via migrações</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<hr>\n<h2 id="restri-es-no-sqlite">Restrições no SQLite</h2>\n<p>Considere as seguintes tabelas:</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE usuarios (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    nome TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE,\n    nascimento TEXT,\n    pontos INTEGER DEFAULT 0,\n    criado_em TEXT DEFAULT CURRENT_TIMESTAMP\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const usuarios = sqliteTable(\'usuarios\', {\n  id: integer().primaryKey({ autoIncrement: true }),\n  nome: text().notNull(),\n  email: text().notNull().unique(),\n  nascimento: text(),\n  pontos: integer().default(0),\n  criado_em: text().default(sql`CURRENT_TIMESTAMP`),\n});</code></pre>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE posts (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    titulo TEXT NOT NULL,\n    conteudo TEXT NOT NULL,\n    usuario_id INTEGER NOT NULL,\n    criado_em TEXT DEFAULT CURRENT_TIMESTAMP,\n    atualizado_em TEXT DEFAULT CURRENT_TIMESTAMP CHECK(atualizado_em >= criado_em),\n    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const posts = sqliteTable(\'posts\', {\n  id: integer().primaryKey({ autoIncrement: true }),\n  titulo: text().notNull(),\n  conteudo: text().notNull(),\n  usuario_id: integer().notNull().references(() => usuarios.id),\n  criado_em: text().default(sql`CURRENT_TIMESTAMP`),\n  atualizado_em: text().default(sql`CURRENT_TIMESTAMP`)\n}, posts => [\n  check(\'atualizado_em_chk\', sql`${posts.atualizado_em} >= ${posts.criado_em}`)\n]);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Essas tabelas apresentam as seguintes restrições:</p>\n<h3 id="chave-prim-ria">PRIMARY KEY</h3>\n<p>Indica uma coluna como chave primária.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE categorias (\n    rotulo TEXT PRIMARY KEY\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const categorias = sqliteTable(\'categorias\', {\n  rotulo: text().primaryKey(),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="autoincremento">AUTOINCREMENT</h3>\n<p>Utiliza <code>AUTOINCREMENT</code> junto com <code>INTEGER PRIMARY KEY</code> para gerar valores únicos automaticamente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE usuarios (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const usuarios = sqliteTable(\'usuarios\', {\n  id: integer().primaryKey({ autoIncrement: true }),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="restri-o-nica">UNIQUE</h3>\n<p>Assegura que todos os valores de uma coluna sejam distintos.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE usuarios (\n    email TEXT UNIQUE\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const usuarios = sqliteTable(\'usuarios\', {\n  email: text().unique(),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="restri-o-not-null">NOT NULL</h3>\n<p>Garante que uma coluna não possa conter valores <code>NULL</code>.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE usuarios (\n    nome TEXT NOT NULL\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const usuarios = sqliteTable(\'usuarios\', {\n  nome: text().notNull(),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="chave-estrangeira">FOREIGN KEY</h3>\n<p>Define uma chave estrangeira para estabelecer relacionamentos entre tabelas.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE posts (\n    usuario_id INTEGER NOT NULL,\n    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const posts = sqliteTable(\'posts\', {\n  usuario_id: integer().notNull().references(() => usuarios.id),\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="restri-o-check">CHECK</h3>\n<p>Adiciona uma validação de dados na entrada.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE posts (\n    atualizado_em TEXT DEFAULT CURRENT_TIMESTAMP CHECK(atualizado_em >= criado_em)\n);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const posts = sqliteTable(\'posts\', {\n  atualizado_em: text().default(sql`CURRENT_TIMESTAMP`)\n}, posts => [\n  check(\'atualizado_em_chk\', sql`${posts.atualizado_em} >= ${posts.criado_em}`)\n]);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>No DrizzleORM, algumas restrições, como o <code>CHECK</code>, ainda não são declaradas junto da declaração da coluna, mas em uma lista de restrições à parte, passada no terceiro argumento da função <code>sqliteTable</code>.</p>\n\n<hr>\n<h2 id="linguagem-de-manipula-o-de-dados-dml-">Linguagem de Manipulação de Dados (DML)</h2>\n<h3 id="inserir-dados">INSERT INTO</h3>\n<p>Insere um novo registro em uma tabela.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>INSERT INTO usuarios (nome, email)\nVALUES (\'maria_silva\', \'maria@silva.com.br\');</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.insert(usuarios).values({\n  nome: \'maria_silva\',\n  email: \'maria@silva.com.br\',\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Insira diversos registros de uma só vez.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>INSERT INTO usuarios (nome, email, nascimento)\nVALUES\n    (\'francisca_pereira\', \'francisca@pereira.com\', \'2002-11-05\'),\n    (\'jose_santos\', \'jose@santos.com\', \'2004-02-29\'),\n    (\'joao_souza\', \'joao@souza.com\', \'2001-12-31\'),\n    (\'ana_oliveira\', \'ana@oliveira.com\', \'2002-11-05\');\n\nINSERT INTO posts (titulo, conteudo, usuario_id)\nVALUES\n    (\'primeiro artigo\', \'conteúdo do primeiro artigo\', 1),\n    (\'segundo artigo\', \'conteúdo do segundo artigo\', 2),\n    (\'terceiro artigo\', \'conteúdo do terceiro artigo\', 2),\n    (\'quarto artigo\', \'conteúdo do quarto artigo\', 1),\n    (\'quinto artigo\', \'conteúdo do quinto artigo\', 2);</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.insert(usuarios).values([\n  { nome: \'francisca_pereira\', email: \'francisca@pereira.com\', nascimento: \'2002-11-05\' },\n  { nome: \'jose_santos\', email: \'jose@santos.com\', nascimento: \'2004-02-29\' },\n  { nome: \'joao_souza\', email: \'joao@souza.com\', nascimento: \'2001-12-31\' },\n  { nome: \'ana_oliveira\', email: \'ana@oliveira.com\', nascimento: \'2002-11-05\' },\n]);\n\nawait db.insert(posts).values([\n  { titulo: \'primeiro artigo\', conteudo: \'conteúdo do primeiro artigo\', usuario_id: 1 },\n  { titulo: \'segundo artigo\', conteudo: \'conteúdo do segundo artigo\', usuario_id: 2 },\n  { titulo: \'terceiro artigo\', conteudo: \'conteúdo do terceiro artigo\', usuario_id: 2 },\n  { titulo: \'quarto artigo\', conteudo: \'conteúdo do quarto artigo\', usuario_id: 1 },\n  { titulo: \'quinto artigo\', conteudo: \'conteúdo do quinto artigo\', usuario_id: 2 },\n]);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="atualizar-dados">UPDATE</h3>\n<p>Atualize um registro existente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>UPDATE usuarios SET pontos = 100 WHERE nome = \'jose_santos\';</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.update(usuarios).set({ pontos: 100 }).where(eq(usuarios.nome, \'jose_santos\'));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="excluir-dados">DELETE</h3>\n<p>Elimina um registro de uma tabela.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>DELETE FROM usuarios WHERE nome = \'maria_silva\';</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.delete(usuarios).where(eq(usuarios.nome, \'maria_silva\'));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<hr>\n<h2 id="linguagem-de-consulta-de-dados-dql-">Linguagem de Consulta de Dados (DQL)</h2>\n<h3 id="selecionar-dados">SELECT</h3>\n<p>Recupere todos os registros de uma tabela.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios;</code></pre>\n      </td>\n      <td>\n        <pre><code>const todosUsuarios = await db.select().from(usuarios);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="select" class="custom-modal">\n  <pre><code class="js">console.log(todosUsuarios)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 3,\n    nome: \'jose_santos\',\n    email: \'jose@santos.com\',\n    nascimento: \'2004-02-29\',\n    pontos: 100,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="select">Exibir resultado</button></div>\n\n<h3 id="selecionar-colunas-espec-ficas">Selecionar Colunas Específicas</h3>\n<p>Recupere colunas específicas de uma tabela.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT nome, email FROM usuarios;</code></pre>\n      </td>\n      <td>\n        <pre><code>const nomesEmails = await db.select({ nome: usuarios.nome, email: usuarios.email }).from(usuarios);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="selectcolumn" class="custom-modal">\n  <pre><code class="js">console.log(nomesEmails)</code></pre>\n  <pre><code class="json">[ \n  { nome: \'maria_silva\', email: \'maria@silva.com.br\' },\n  { nome: \'francisca_pereira\', email: \'francisca@pereira.com\' },\n  { nome: \'jose_santos\', email: \'jose@santos.com\' },\n  { nome: \'joao_souza\', email: \'joao@souza.com\' },\n  { nome: \'ana_oliveira\', email: \'ana@oliveira.com\' }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="selectcolumn">Exibir resultado</button></div>\n\n<h3 id="filtro-com-where">WHERE</h3>\n<p>Filtre resultados com base em condições.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios WHERE nome = \'maria_silva\';</code></pre>\n      </td>\n      <td>\n        <pre><code>const usuario = await db.select().from(usuarios).where(eq(usuarios.nome, \'maria_silva\'));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="where" class="custom-modal">\n  <pre><code class="js">console.log(usuario)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="where">Exibir resultado</button></div>\n\n<h3 id="ordena-o-order-by-">ORDER BY</h3>\n<p>Ordene os resultados por uma ou mais colunas. Aqui estão diferentes exemplos de ordenação:</p>\n<p>Ordene por <code>nome</code> em ordem crescente (padrão).</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios ORDER BY nome;</code></pre>\n      </td>\n      <td>\n        <pre><code>const ordenadosPorNome = await db.select().from(usuarios).orderBy(usuarios.nome);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="orderby" class="custom-modal">\n  <pre><code class="js">console.log(ordenadosPorNome)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 3,\n    nome: \'jose_santos\',\n    email: \'jose@santos.com\',\n    nascimento: \'2004-02-29\',\n    pontos: 100,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="orderby">Exibir resultado</button></div>\n\n<p>Ordene por <code>nascimento</code> em ordem decrescente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios ORDER BY nascimento DESC;</code></pre>\n      </td>\n      <td>\n        <pre><code>const ordenadosPorNascimento = await db.select().from(usuarios).orderBy(desc(usuarios.nascimento));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="orderbydesc" class="custom-modal">\n  <pre><code class="js">console.log(ordenadosPorNascimento)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 3,\n    nome: \'jose_santos\',\n    email: \'jose@santos.com\',\n    nascimento: \'2004-02-29\',\n    pontos: 100,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="orderbydesc">Exibir resultado</button></div>\n\n<p>Ordene primeiro por <code>nascimento</code> em ordem decrescente e, em seguida, por <code>email</code> em ordem crescente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios ORDER BY nascimento DESC, email ASC;</code></pre>\n      </td>\n      <td>\n        <pre><code>const ordenadosPorNascimentoEmail = await db.select().from(usuarios)\n    .orderBy(desc(usuarios.nascimento), usuarios.email);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="orderbyseveral" class="custom-modal">\n  <pre><code class="js">console.log(ordenadosPorNascimentoEmail)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 3,\n    nome: \'jose_santos\',\n    email: \'jose@santos.com\',\n    nascimento: \'2004-02-29\',\n    pontos: 100,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="orderbyseveral">Exibir resultado</button></div>\n\n<h3 id="pagina-o-limit-e-offset-">LIMIT / OFFSET (Paginação)</h3>\n<p>Recupere os primeiros 3 usuários.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios LIMIT 3;</code></pre>\n      </td>\n      <td>\n        <pre><code>const primeiros3 = await db.select().from(usuarios).limit(3);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="limit" class="custom-modal">\n  <pre><code class="js">console.log(primeiros3)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 1,\n    nome: \'maria_silva\',\n    email: \'maria@silva.com.br\',\n    nascimento: null,\n    pontos: 0,\n    criado_em: \'2025-03-31 16:44:12\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 3,\n    nome: \'jose_santos\',\n    email: \'jose@santos.com\',\n    nascimento: \'2004-02-29\',\n    pontos: 100,\n    criado_em: \'2025-03-31 16:45:03\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="limit">Exibir resultado</button></div>\n\n<p>Pule os primeiros 3 usuários e recupere os próximos 3.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios LIMIT 3 OFFSET 3;</code></pre>\n      </td>\n      <td>\n        <pre><code>const segundos3 = await db.select().from(usuarios).limit(3).offset(3);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="offset" class="custom-modal">\n  <pre><code class="js">console.log(segundos3)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="offset">Exibir resultado</button></div>\n\n<h3 id="ordena-o-e-pagina-o-juntas">Ordenação e Paginação Juntas</h3>\n<p>Ordene usuários pelo <code>nome</code> e pagine os resultados para obter os primeiros 3 registros.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT * FROM usuarios ORDER BY nome ASC LIMIT 3;</code></pre>\n      </td>\n      <td>\n        <pre><code>const primeirosUsuarios = await db.select().from(usuarios).orderBy(asc(usuarios.nome)).limit(3);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="orderbylimit" class="custom-modal">\n  <pre><code class="js">console.log(primeirosUsuarios)</code></pre>\n  <pre><code class="json">[\n  {\n    id: 5,\n    nome: \'ana_oliveira\',\n    email: \'ana@oliveira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 2,\n    nome: \'francisca_pereira\',\n    email: \'francisca@pereira.com\',\n    nascimento: \'2002-11-05\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  },\n  {\n    id: 4,\n    nome: \'joao_souza\',\n    email: \'joao@souza.com\',\n    nascimento: \'2001-12-31\',\n    pontos: 0,\n    criado_em: \'2025-03-31 16:45:03\'\n  }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="orderbylimit">Exibir resultado</button></div>\n\n<p>Diferentes páginas:</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>-- Página 1\nSELECT * FROM usuarios ORDER BY nome LIMIT 3 OFFSET 0;\n\n-- Página 2\nSELECT * FROM usuarios ORDER BY nome LIMIT 3 OFFSET 3;\n\n-- Página 3\nSELECT * FROM usuarios ORDER BY nome LIMIT 3 OFFSET 6;</code></pre>\n      </td>\n      <td>\n        <pre><code>// Página 1\nconst pagina1 = await db.select().from(usuarios).orderBy(usuarios.nome).limit(3).offset(0);\n\n// Página 2\nconst pagina2 = await db.select().from(usuarios).orderBy(usuarios.nome).limit(3).offset(3);\n\n// Página 3\nconst pagina3 = await db.select().from(usuarios).orderBy(usuarios.nome).limit(3).offset(6);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="paginacao" class="custom-modal">\n  <pre><code class="js">console.log([pagina1, pagina2, pagina3])</code></pre>\n  <pre><code class="json">[\n  [\n    {\n      id: 5,\n      nome: \'ana_oliveira\',\n      email: \'ana@oliveira.com\',\n      nascimento: \'2002-11-05\',\n      pontos: 0,\n      criado_em: \'2025-03-31 16:45:03\'\n    },\n    {\n      id: 2,\n      nome: \'francisca_pereira\',\n      email: \'francisca@pereira.com\',\n      nascimento: \'2002-11-05\',\n      pontos: 0,\n      criado_em: \'2025-03-31 16:45:03\'\n    },\n    {\n      id: 4,\n      nome: \'joao_souza\',\n      email: \'joao@souza.com\',\n      nascimento: \'2001-12-31\',\n      pontos: 0,\n      criado_em: \'2025-03-31 16:45:03\'\n    }\n  ],\n  [\n    {\n      id: 3,\n      nome: \'jose_santos\',\n      email: \'jose@santos.com\',\n      nascimento: \'2004-02-29\',\n      pontos: 100,\n      criado_em: \'2025-03-31 16:45:03\'\n    },\n    {\n      id: 1,\n      nome: \'maria_silva\',\n      email: \'maria@silva.com.br\',\n      nascimento: null,\n      pontos: 0,\n      criado_em: \'2025-03-31 16:44:12\'\n    }\n  ],\n  []\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="paginacao">Exibir resultado</button></div>\n\n<hr>\n<h2 id="joins-jun-es-de-tabelas-">JOINs (Junções de Tabelas)</h2>\n<h3 id="inner-join">INNER JOIN</h3>\n<p>Combine registros de duas tabelas com base em uma condição específica.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT usuarios.nome, posts.titulo\nFROM usuarios\nINNER JOIN posts ON usuarios.id = posts.usuario_id;</code></pre>\n      </td>\n      <td>\n        <pre><code>const usuariosComPosts = await db\n  .select({ nome: usuarios.nome, titulo: posts.titulo })\n  .from(usuarios)\n  .innerJoin(posts, eq(usuarios.id, posts.usuario_id));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="innerjoin" class="custom-modal">\n  <pre><code class="js">console.log(usuariosComPosts)</code></pre>\n  <pre><code class="json">[\n  { nome: \'maria_silva\', titulo: \'primeiro artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'segundo artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'terceiro artigo\' },\n  { nome: \'maria_silva\', titulo: \'quarto artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'quinto artigo\' }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="innerjoin">Exibir resultado</button></div>\n\n<h3 id="left-join">LEFT JOIN</h3>\n<p>Retorna todos os registros da tabela à esquerda e os correspondentes da tabela à direita.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT usuarios.nome, posts.titulo\nFROM usuarios\nLEFT JOIN posts ON usuarios.id = posts.usuario_id;</code></pre>\n      </td>\n      <td>\n        <pre><code>const usuariosEPosts = await db\n  .select({ nome: usuarios.nome, titulo: posts.titulo })\n  .from(usuarios)\n  .leftJoin(posts, eq(usuarios.id, posts.usuario_id));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="leftjoin" class="custom-modal">\n  <pre><code class="js">console.log(usuariosEPosts)</code></pre>\n  <pre><code class="json">[\n  { nome: \'maria_silva\', titulo: \'primeiro artigo\' },\n  { nome: \'maria_silva\', titulo: \'quarto artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'quinto artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'segundo artigo\' },\n  { nome: \'francisca_pereira\', titulo: \'terceiro artigo\' },\n  { nome: \'jose_santos\', titulo: null },\n  { nome: \'joao_souza\', titulo: null },\n  { nome: \'ana_oliveira\', titulo: null }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="leftjoin">Exibir resultado</button></div>\n\n<h3 id="right-join-simulado-">RIGHT JOIN (Simulado)</h3>\n<p>O SQLite não suporta <code>RIGHT JOIN</code> diretamente, mas podemos simular esse comportamento invertendo a ordem das tabelas e utilizando <code>LEFT JOIN</code>.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT posts.titulo, usuarios.nome\nFROM posts\nLEFT JOIN usuarios ON posts.usuario_id = usuarios.id;</code></pre>\n      </td>\n      <td>\n        <pre><code>const postsEUsuarios = await db\n  .select({ tituloPost: posts.titulo, nome: usuarios.nome })\n  .from(posts)\n  .leftJoin(usuarios, eq(posts.usuario_id, usuarios.id));</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="rightjoin" class="custom-modal">\n  <pre><code class="js">console.log(postsEUsuarios)</code></pre>\n  <pre><code class="json">[\n  { tituloPost: \'primeiro artigo\', nome: \'maria_silva\' },\n  { tituloPost: \'segundo artigo\', nome: \'francisca_pereira\' },\n  { tituloPost: \'terceiro artigo\', nome: \'francisca_pereira\' },\n  { tituloPost: \'quarto artigo\', nome: \'maria_silva\' },\n  { tituloPost: \'quinto artigo\', nome: \'francisca_pereira\' }\n]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="rightjoin">Exibir resultado</button></div>\n\n<hr>\n<h2 id="agrega-o-e-agrupamento">Agregação e Agrupamento</h2>\n<h3 id="contagem">COUNT</h3>\n<p>Conta o número total de linhas em uma tabela.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT COUNT(*) FROM usuarios;</code></pre>\n      </td>\n      <td>\n        <pre><code>const totalUsuarios = await db.select({ count: count() }).from(usuarios);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="count" class="custom-modal">\n  <pre><code class="js">console.log(totalUsuarios)</code></pre>\n  <pre><code class="json">[ { count: 5 } ]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="count">Exibir resultado</button></div>\n\n<h3 id="agrupar-por">GROUP BY</h3>\n<p>Agrupa linhas utilizando uma ou mais colunas como referência.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT usuario_id, COUNT(*) FROM posts GROUP BY usuario_id;</code></pre>\n      </td>\n      <td>\n        <pre><code>const postsPorUsuario = await db\n    .select({ usuario_id: posts.usuario_id, count: count() })\n    .from(posts)\n    .groupBy(posts.usuario_id);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="groupby" class="custom-modal">\n  <pre><code class="js">console.log(postsPorUsuario)</code></pre>\n  <pre><code class="json">[ { usuario_id: 1, count: 2 }, { usuario_id: 2, count: 3 } ]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="groupby">Exibir resultado</button></div>\n\n<h3 id="soma">SUM</h3>\n<p>Soma todos os valores de uma coluna específica.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT SUM(pontos) FROM usuarios;</code></pre>\n      </td>\n      <td>\n        <pre><code>const pontos = await db.select({ pontos: sum(usuarios.pontos) }).from(usuarios);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="sum" class="custom-modal">\n  <pre><code class="js">console.log(pontos)</code></pre>\n  <pre><code class="json">[ { pontos: \'100\' } ]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="sum">Exibir resultado</button></div>\n\n<h3 id="m-ximo-m-nimo">MAX/MIN</h3>\n<p>Determina o maior ou menor valor presente em uma coluna.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>SELECT MAX(nascimento) FROM usuarios;\nSELECT MIN(nascimento) FROM usuarios;</code></pre>\n      </td>\n      <td>\n        <pre><code>const cacula = await db\n    .select({ nascimento: max(usuarios.nascimento) }) \n    .from(usuarios);\n\nconst primogenito = await db \n    .select({ nascimento: min(usuarios.nascimento) })\n    .from(usuarios);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<dialog id="minmax" class="custom-modal">\n  <pre><code class="js">console.log([cacula, primogenito])</code></pre>\n  <pre><code class="json">[ [ { nascimento: \'2004-02-29\' } ], [ { nascimento: \'2001-12-31\' } ] ]</code></pre>\n</dialog>\n<div style="text-align:center"><button data-custom-modal="minmax">Exibir resultado</button></div>\n\n<h2 id="transa-es">Transações</h2>\n<p>Transações no DrizzleORM são manipuladas dentro da função <code>transaction</code>. A transação é finalizada (commitada) ao término da função. Caso a transação não seja bem-sucedida ou o comando <code>rollback</code> seja acionado, a transação será revertida, gerando uma exceção.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>BEGIN TRANSACTION;\n\nSELECT pontos INTO @pontos FROM usuarios WHERE nome = \'jose_santos\';\n\nSELECT CASE \n    WHEN @pontos &lt; 100 THEN ROLLBACK \nEND;\n\nUPDATE usuarios \nSET pontos = pontos - 100 \nWHERE nome = \'jose_santos\';\n\nUPDATE usuarios \nSET pontos = pontos + 100 \nWHERE nome = \'ana_oliveira\';\n\nCOMMIT;</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.transaction(async (tx) => {\n    // Seleciona o usuário \'jose_santos\' para verificar os pontos\n    const [usuario] = await tx.select().from(usuarios)\n        .where(eq(usuarios.nome, \'jose_santos\'));\n\n    // Se os pontos forem menores que 100, faz rollback\n    if (usuario.pontos &lt; 100) {\n        throw new Error(\'Usuário não possui pontos suficientes.\');\n    }\n\n    // Subtrai 100 pontos de \'jose_santos\'\n    await tx.update(usuarios)\n        .set({ pontos: sql`${usuarios.pontos} - 100` })\n        .where(eq(usuarios.nome, \'jose_santos\'));\n\n    // Adiciona 100 pontos para \'ana_oliveira\'\n    await tx.update(usuarios)\n        .set({ pontos: sql`${usuarios.pontos} + 100` })\n        .where(eq(usuarios.nome, \'ana_oliveira\'));\n});</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<p>Atualmente, <a href="https://github.com/drizzle-team/drizzle-orm/issues/1957">não é possível definir uma mensagem personalizada</a> ao utilizar <code>tx.rollback()</code>. Portanto, é recomendado lançar manualmente uma exceção com a mensagem desejada, como exemplificado acima.</p>\n\n<h3 id="iniciar-transa-o">BEGIN TRANSACTION</h3>\n<p>Inicializa uma nova transação.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>BEGIN TRANSACTION;</code></pre>\n      </td>\n      <td>\n        <pre><code>await db.transaction(async (tx) => { ...</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="confirmar">COMMIT</h3>\n<p>Finaliza e confirma a transação atual.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>COMMIT;</code></pre>\n      </td>\n      <td>\n        <pre><code>... });</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="reverter">ROLLBACK</h3>\n<p>Desfaz a transação atual em andamento.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>ROLLBACK;</code></pre>\n      </td>\n      <td>\n        <pre><code>tx.rollback();</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<hr>\n<h2 id="-ndices-e-otimiza-o">Índices e Otimização</h2>\n<h3 id="criar-ndice">CREATE INDEX</h3>\n<p>Crie um índice para otimizar a velocidade das consultas.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>CREATE TABLE usuarios (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    nome TEXT,\n    email TEXT UNIQUE\n);\n\nCREATE INDEX nome_idx ON usuarios(nome);\n\nCREATE UNIQUE INDEX email_idx ON usuarios(email);</code></pre>\n      </td>\n      <td>\n        <pre><code>export const usuarios = sqliteTable("usuarios", {\n  id: integer().primaryKey({ autoIncrement: true }),\n  nome: text(),\n  email: text(),\n}, (usuarios) => [\n  index("nome_idx").on(usuarios.nome),\n  uniqueIndex("email_idx").on(usuarios.email),\n]);</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id="remover-ndice">DROP INDEX</h3>\n<p>Exclua um índice existente.</p>\n<table class="custom">\n  <thead>\n    <tr>\n      <th>SQLite</th>\n      <th>Drizzle ORM</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <pre><code class=\'sql\'>DROP INDEX idx_nome;</code></pre>\n      </td>\n      <td>\n        <pre><code>// As modificações na estrutura do índice no Drizzle são implementadas via migrações</code></pre>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<hr>\n<h2 id="comandos-do-sqlite-shell">Comandos do SQLite Shell</h2>\n<p>Confira alguns comandos úteis do SQLite Shell:</p>\n\n<p>Exporte o banco de dados para um arquivo SQL.</p>\n<pre><code class=\'sql\'>.output dump.sql\n.dump</code></pre>\n\n<p>Importe um banco de dados a partir de um arquivo SQL.</p>\n<pre><code class=\'sql\'>.read dump.sql</code></pre>\n\n<p>Liste todas as tabelas disponíveis no banco de dados.</p>\n<pre><code class=\'sql\'>.tables</code></pre>\n\n<p>Visualize a estrutura de uma tabela.</p>\n<pre><code class=\'sql\'>.schema usuarios</code></pre>\n\n<p>Saia do SQLite Shell.</p>\n<pre><code class=\'sql\'>.exit</code></pre>\n<hr>', role='assistant', function_call=None, tool_calls=None, refusal=None))
print(result.message.content)